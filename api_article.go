package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type JSONTime struct {
	T time.Time
}

func (t *JSONTime) MarshalJSON() ([]byte, error) {
	s := fmt.Sprintf(`"%s"`, t.T.Format("2006-01-02T15:04:05.000Z"))
	return []byte(s), nil
}

func (t *JSONTime) UnmarshalJSON(data []byte) error {
	s := string(data)
	if s == `"null"` {
		// set T to the zero value of time.Time
		t.T = time.Date(1, 1, 1, 0, 0, 0, 0, time.FixedZone("UTC", 0))
		return nil
	}
	size := len(s)
	if size != 26 || s[0] != '"' || s[25] != '"' {
		return fmt.Errorf("invalid datetime string: %v", s)
	}
	var err error
	t.T, err = time.Parse("2006-01-02T15:04:05.000Z", s[1:25])
	return err
}

type Article struct {
	Id          string    `json:"id,omitempty"`
	Headline    string    `json:"headline,omitempty"`
	Summary     string    `json:"summary,omitempty"`
	Content     string    `json:"content,omitempty"`
	Tag         []string  `json:"tag,omitempty"`
	CreatedAt   *JSONTime `json:"created_at,omitempty"`
	CreatedBy   string    `json:"created_by,omitempty"`
	RevisedAt   *JSONTime `json:"revised_at,omitempty"`
	RevisedBy   string    `json:"revised_by,omitempty"`
	Version     int64     `json:"version,omitempty"`
	FromVersion int64     `json:"from_version,omitempty"`
	Note        string    `json:"note,omitempty"`
	LockedBy    string    `json:"locked_by,omitempty"`
}

func (a *Article) NilZeroTimeFields() *Article {
	if a.CreatedAt != nil && a.CreatedAt.T.IsZero() {
		a.CreatedAt = nil
	}
	if a.RevisedAt != nil && a.RevisedAt.T.IsZero() {
		a.RevisedAt = nil
	}
	return a
}

func unmarshalArticle(data []byte) (*Article, error) {
	var a Article
	err := json.Unmarshal(data, &a)
	if err != nil {
		return nil, err
	}
	return (&a).NilZeroTimeFields(), nil
}

func ArticleCreate(w http.ResponseWriter, r *http.Request, app *AppRuntime) *HttpResponseData {
	user, d := ParseQueryStringValue(r.URL.Query(), "user", true, "")
	if d != nil {
		return d
	}
	article := &Article{
		LockedBy: user,
	}
	// don't set Id or OpType in order to have id auto-generated by elasticsearch
	idxService := app.Elastic.Client.Index()
	idxService.Index(app.Conf.ArticleIndex.Name)
	idxService.Type(app.Conf.ArticleIndexTypes.Draft)
	idxService.BodyJson(article)
	resp, err := idxService.Do(app.Elastic.Context)
	if err != nil {
		body := fmt.Sprintf("error creating new doc: %v", err)
		return CreateInternalServerErrorRespData(body)
	} else {
		article.Id = resp.Id
		article.CreatedBy = user
		if bytes, err := json.Marshal(article); err == nil {
			return CreateRespData(http.StatusOK, ContentTypeValueJSON, string(bytes))
		} else {
			body := fmt.Sprintf("failed to marshal Article object, error: %v", err)
			return CreateInternalServerErrorRespData(body)
		}
	}
}
